@use "sass:color";
@use "sass:math";
@use 'do_config' as *;
@use '../custom/do' as *;
/*
-
Les couleurs v2 !!!

ajouter : https://blog.jim-nielsen.com/2021/css-relative-colors/
-
*/

@function do-hsl($colorHsl,$opacity:1,$filter:false,$offset:0){

    //@debug(calc(var(--#{$colorHsl}-H) + math.random(10)));

    @if($filter){
        @return hsla(var(--#{$colorHsl}-color-H),
                     var(--#{$colorHsl}-color-S),
                     calc( var(--#{$colorHsl}-color-L) + $offset),
                     $opacity
        )
    }
    @return hsla(var(--#{$colorHsl}-color),$opacity);

}

@function do-hsl-auto($colorHsl,$opacity:1){

    @return hsla(var(--#{$colorHsl}-color-H),0% ,calc( ( var(--#{$colorHsl}-color-L) - 60% ) * -100 ),$opacity);

}


@mixin do-events-color-extend($class, $extendHover: true) {
    .#{$class} {
        @content;
    }

    @each $event-type, $type in $do-events-type {
        @each $event, $event-class in $type {
            [do-event-#{$event-type}='#{$event}'] {
                .#{$event-type}-#{$event}\:#{$class} {
                    @content;
                }
            }
        }
    }

    .active {
        .all-active\:#{$class} {
            @content;
        }
        .deep-active\:#{$class} {
            @content;
        }
        &.active\:#{$class} {
            @content;
        }
    }
    @if $extendHover == true {
        //@debug('hover', #{$class});
        @include do-extend-color-hover('hover', #{$class}) {
            @content;
        }
    }
}

@mixin do-extend-color-hover($event, $class) {
    .#{$event}:#{$event} {
        .#{$event}\:#{$class} {
            @content;
        }
    }

    .#{$class}\:#{$event} {
        &:hover {
            @content;
        }
    }
}

@mixin do-color-full-class($class, $color, $responsiveLoop:false) {

    @each $color-type, $color-type-class in $do-colors-type {
        //@debug(#{$class}-#{$color-type}-#{$color}-color);
        @include do-events-color-extend(#{$class}-#{$color-type}-#{$color}-color) {
            #{$color-type-class}: do-hsl($color) !important;
        }

        @each $child-type, $child-type-class in $do-childs-selector {
            //@debug(#{$child-type}\:#{$class}-#{$color-type}-#{$color}-color);
            .#{$child-type}\:#{$class}-#{$color-type}-#{$color}-color {
                > #{$child-type-class} {
                    #{$color-type-class}: do-hsl($color) !important;
                }
            }
        }

        @if($responsiveLoop == false){


            @include do-events-color-extend(#{$class}-#{$color-type}-#{$color}-color-darken,true) {

                #{$color-type-class}: do-hsl($color,1,true,-6%) !important;       
  
            }

            @include do-events-color-extend(#{$class}-#{$color-type}-#{$color}-color-lighten,true) {

                #{$color-type-class}: do-hsl($color,1,true,6%) !important;

            }

            .#{$class}-#{$color-type}-#{$color}-color {

                    &-hue{
                        #{$color-type-class}: hsla(var(--#{$color}-color-H), 100%, 50%,1);
                    }
        
                    &-gray{
                        #{$color-type-class}: hsla(var(--#{$color}-color-H), 5%, 50%,1);
                    }

                    @if($color-type == "txt"){
                        &-auto{
                            color: do-hsl-auto($color) !important;       
                        }
                    }

                    @if($color-type == "bg"){
                        &-auto{
                            background-color: do-hsl-auto($color) !important;      
                        }
                    }

                    @if($color-type == "fill"){
                        &-auto{
                            fill: do-hsl-auto($color) !important;      
                        }
                    }

                    @if($color-type == "stroke"){
                        &-auto{
                            stroke: do-hsl-auto($color) !important;      
                        }
                    }


                @for $i from 0 through $do-max {
                    &-#{$i}{

                        #{$color-type-class}: do-hsl($color,math.div($i,10)) !important;

                       
                        &-darken{
                            #{$color-type-class}: do-hsl($color,math.div($i,10),true,-10%) !important;       
                        }
                        &-lighten{
                            #{$color-type-class}: do-hsl($color,math.div($i,10),true,10%) !important;
                        }

                        @if($color-type == "bg"){
                            &-auto{
                                background-color: do-hsl-auto($color,math.div($i,10)) !important;      
                            }
                        }

                        
                    }
    
                }
                @if($color-type-class == "background-color"){

                    @each $colorName in $colorsVar {

                 
                        &-#{$colorName}-grad-radial{
    
                            background: radial-gradient(do-hsl($color,1) 0%, do-hsl($colorName,1) 100%);
    
                        }
                        &-#{$colorName}-grad-gold{
                            background: radial-gradient(do-hsl($colorName,0.2), do-hsl($color,0.5)),
                                        radial-gradient(ellipse at top, do-hsl($color,0.6), do-hsl($colorName,0.2)),
                                        radial-gradient(ellipse at bottom, do-hsl($colorName,0.5), do-hsl($color,0.2));
                        }

                    }

                    @for $i from 0 through $do-num-angle - 1 {

                        $angle : #{math.div(360,$do-num-angle)*$i}deg;

                        @each $colorName in $colorsVar {

                            &-#{$colorName}-grad-linear-#{$i}{
        
                                background: linear-gradient($angle, do-hsl($color,1) 0%, do-hsl($colorName,1) 100%);
        
                            }
    
                        }

                        &-grad-linear-#{$i}{
    
                            background: linear-gradient($angle, do-hsl($color,0) 0%, do-hsl($color,1) 100%);

                            &-darken{
    
                                background: linear-gradient($angle, do-hsl($color,0,true,-6%) 0%, do-hsl($color,1,true,-6%) 100%);
        
                            }
                            &-lighten{
    
                                background: linear-gradient($angle, do-hsl($color,0,true,6%) 0%, do-hsl($color,1,true,6%) 100%);
        
                            }
    
                        }
                        &-grad-linear-gold-#{$i}{
                            
                            $grad-gold : "";
                            $div : math.div(10,8);
                            
                            $u : 0;
                            @each $key, $value in $do-matrix {
                                $value : $value - 0.34;
                                $grad-gold : #{$grad-gold}, do-hsl($color,#{1 - math.div($u,10)}) #{$value*math.div($do-ratio-to-100,$do)};
                                $u : $u+$div; 
                            }

                            #{'background'}: linear-gradient($angle, #{$grad-gold});
                            
                        }
                        &-grad-radial-#{$i}{
                            
                            background: radial-gradient(do-hsl($color,0) #{$i*math.round(math.div($do-ratio-to-100,$do))}, do-hsl($color,1) 100%);
    
                        }
                    }
                }    
            }
        }
    }
    %bg-#{$color}-color {
        background-color: do-hsl($color);
    }
}

@mixin do-color-extend($className, $colorName, $totalExtend: false) {
    @each $colorNameBase, $colorVar in $colorsVar {
        // @debug("--> "#{$className}-all-#{$colorNameBase} ':' #{$colorName});
        @if ($totalExtend == true) {
          @include do-events-color-extend(#{$className}-all-#{$colorNameBase}\:#{$colorName}) {
            --#{$colorNameBase}-color: var(--#{$colorName}) !important;
          }
        }
        @include do-events-color-extend(#{$className}-#{$colorNameBase}\:#{$colorName}) {
          --#{$colorNameBase}-color: var(--#{$colorName}) !important;
        }
    }
    [data-do-bg='#{$colorName}'] {
        //background-color: var(--#{$colorName}-color) !important;
        background-color: do-hsl($colorName);
    }
    [data-do-txt='#{$colorName}'] {
        color: do-hsl($colorName);
    }
}

@mixin do-colors($class, $responsive:false) {
    @each $colorName in $colorsVar {

        @if ($responsive == false) {
            @include do-color-extend(#{$class}set, $colorName, true);
        }

        @include do-color-full-class(#{$class}do, $colorName, $responsive);

        @if ($responsive == false) {
    
            @each $colorName2 in $colorsVar {
                @if ($colorName2 != $colorName) {
                    [data-set-#{$colorName}='#{$colorName2}'],
                    .set-#{$colorName}-#{$colorName2} {

                        --#{$colorName}-color: var(--#{$colorName2}-color) !important;

                        --#{$colorName}-color-H: var(--#{$colorName2}-color-H) !important;
                        --#{$colorName}-color-S: var(--#{$colorName2}-color-S) !important;
                        --#{$colorName}-color-L: var(--#{$colorName2}-color-L) !important;

                    }
                 

                    [data-do='#{$colorName}-#{$colorName2}'] {
                        background-color: do-hsl($colorName) !important;
                        color: do-hsl($colorName2) !important;
                    }
                    [data-do-hover='#{$colorName}-#{$colorName2}']:hover {
                        background-color: do-hsl($colorName) !important;
                        color: do-hsl($colorName2) !important;
                        path {
                            fill: do-hsl($colorName2) !important;
                        }
                        rect {
                            fill: do-hsl($colorName2) !important;
                        }
                        polygon {
                            fill: do-hsl($colorName2) !important;
                        }
                    }
                }
            }
        }
    }

    @if ($responsive == false) {
        :root{
            @each $colorName in $colorsVar {
                --#{$colorName}-color: var(--#{$colorName});
            }
        }
    }
}


// DARK MODE

.filter-invert{
    filter:invert(1) grayscale(1);
}

@media (prefers-color-scheme: dark) {

    
    .trigger-filter-invert{
        filter:invert(1) grayscale(1);
    }
    
    .filter-invert{
        filter:invert(0) grayscale(0) !important;
    }
}